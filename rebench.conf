# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
standard_run: all
standard_data_file: 'savina.data'
standard_experiment: Savina

reporting:
    csv_file: latest-runs.csv
    csv_locale: de_DE.UTF-8

runs:
    number_of_data_points: 3

statistics:
    confidence_level: 0.95
 
# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    Savina:
        gauge_adapter: SavinaLog
        location: .
        command: " -Dhj.maxThreads=%(cores)s -Dhj.numWorkers=%(cores)s -Dactors.corePoolSize=%(cores)s -Dactors.maxPoolSize=%(cores)s edu.rice.habanero.benchmarks.%(benchmark)s%(variable)sBenchmark -iter 750 "
        max_runtime: 600
        variable_values:
            - AkkaActor
            - FuncJavaActor
            - GparsActor
            - HabaneroActor
            - HabaneroSelector
            - JetlangActor
            - JumiActor
            - LiftActor
            - ScalaActor
            - ScalazActor
        cores: [1] #[1, 2, 4, 8]
        benchmarks:
            # Bitonic sort??
            # Fibonacci??

            # Microbenchmarks
            - PingPong:
                command: pingpong.PingPong
            - Counting:
                command: count.Counting
            - ForkJoinThroughput:
                command: fjthrput.Throughput
                extra_args: " -n 1000 "
            - ForkJoinActorCreation:
                command: fjcreate.ForkJoin
            - ThreadRing:
                command: threadring.ThreadRing
            - Chameneos:
                command: chameneos.Chameneos
                extra_args: " -m 40000 "
            - BigContention:
                command: big.Big
                extra_args: " -n 2000 "

            ## Concurrency
            - ConcurrentDictionary:
                command: concdict.Dictionary
            - ConcurrentSortedLinkedList:
                command: concsll.SortedList
            - ProducerConsumerBoundedBuffer:
                command: bndbuffer.ProdCons
                extra_args: " -np 20 -nc 20 -pc 15 -cc 15 -ipp 30 "
            - DiningPhilosophers:
                command: philosopher.Philosopher
            - SleepingBarber:
                command: barber.SleepingBarber
                extra_args: " -n 1500 "
            - CigaretteSmokers:
                command: cigsmok.CigaretteSmoker
            - LogisticMapSeries:
                command: logmap.LogisticMap
                extra_args: " -t 8000 "
            - BankTransaction:
                command: banking.Banking
                extra_args: " -n 10000 -a 500 "

            ## Parallelism
            - RadixSort:
                command: radixsort.RadixSort
                extra_args: " -n 10000 "
            - FilterBank:
                command: filterbank.FilterBank
                extra_args: " -sim 16384"
            - SieveOfEratosthenes:
                command: sieve.Sieve
            - UnbalancedCobwebbedTree: 
                command: uct.Uct
                extra_args: " -nodes 10000 "
            - OnlineFacilityLocation:
                command: facloc.FacilityLocation
                extra_args: " -n 30000 "
            - TrapezoidalApproximation:
                command: trapezoid.Trapezoidal
                extra_args: " -n 200000 "
            - PrecisePiComputation:
                command: piprecision.PiPrecision
                extra_args: " -p 2000 "
            - RecursiveMatrixMultiplication:
                command: recmatmul.MatMul
                extra_args: " -n 400 "
            - Quicksort:
                command: quicksort.QuickSort
                extra_args: " -n 100000 "
            - AllPairsShortestPath:
                command: apsp.Apsp
                extra_args: " -n 100 "
            - SuccessiveOverRelaxation:
                command: sor.SucOverRelax
            - AStarSearch:
                command: astar.GuidedSearch
            - NQueens:
                command: nqueenk.NQueens
                extra_args: " -n 11 "



# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    java:
        path: /usr/bin
        binary: java
        args: " -cp target/savina-0.0.1-SNAPSHOT-jar-with-dependencies.jar "

        
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    Savina:
        description: Run the Savina Actor benchmarks
        actions: benchmarks
        benchmark: Savina
        executions: java
